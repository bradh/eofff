package net.frogmouth.rnd.eofff.nalvideo;

import static org.testng.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;
import net.frogmouth.rnd.eofff.isobmff.Box;
import net.frogmouth.rnd.eofff.isobmff.ByteArrayParser;
import net.frogmouth.rnd.eofff.isobmff.OutputStreamWriter;
import net.frogmouth.rnd.eofff.isobmff.stsd.SampleDescriptionBox;
import org.testng.annotations.Test;

public class HEVCSampleEntryTest {

    private final byte[] STSD_BYTES =
            new byte[] {
                0x00,
                0x00,
                0x00,
                (byte) 0xe5,
                0x73,
                0x74,
                0x73,
                0x64,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
                (byte) 0xd5,
                0x68,
                0x76,
                0x63,
                0x31,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x14,
                (byte) 0xc0,
                0x0b,
                (byte) 0xac,
                0x00,
                0x48,
                0x00,
                0x00,
                0x00,
                0x48,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x01,
                0x13,
                0x47,
                0x6f,
                0x50,
                0x72,
                0x6f,
                0x20,
                0x48,
                0x2e,
                0x32,
                0x36,
                0x35,
                0x20,
                0x65,
                0x6e,
                0x63,
                0x6f,
                0x64,
                0x65,
                0x72,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x18,
                (byte) 0xff,
                (byte) 0xff,
                0x00,
                0x00,
                0x00,
                0x7f,
                0x68,
                0x76,
                0x63,
                0x43,
                0x01,
                0x01,
                0x60,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                (byte) 0xb4,
                (byte) 0xf0,
                0x00,
                (byte) 0xfc,
                (byte) 0xfd,
                (byte) 0xf8,
                (byte) 0xf8,
                0x00,
                0x00,
                0x0f,
                0x03,
                (byte) 0xa0,
                0x00,
                0x01,
                0x00,
                0x21,
                0x40,
                0x01,
                0x0c,
                0x01,
                (byte) 0xff,
                (byte) 0xff,
                0x01,
                0x60,
                0x00,
                0x00,
                0x03,
                0x00,
                0x00,
                0x03,
                0x00,
                0x00,
                0x03,
                0x00,
                0x00,
                0x03,
                0x00,
                (byte) 0xb4,
                (byte) 0xbc,
                0x0c,
                0x00,
                0x00,
                0x0f,
                (byte) 0xa0,
                0x00,
                0x01,
                (byte) 0xd4,
                0x49,
                0x40,
                (byte) 0xa1,
                0x00,
                0x01,
                0x00,
                0x29,
                0x42,
                0x01,
                0x01,
                0x01,
                0x60,
                0x00,
                0x00,
                0x03,
                0x00,
                0x00,
                0x03,
                0x00,
                0x00,
                0x03,
                0x00,
                0x00,
                0x03,
                0x00,
                (byte) 0xb4,
                (byte) 0xa0,
                0x00,
                (byte) 0xa6,
                0x08,
                0x00,
                (byte) 0xbb,
                0x1f,
                0x79,
                0x6f,
                (byte) 0x92,
                0x4c,
                0x08,
                (byte) 0xfe,
                0x5c,
                (byte) 0xf4,
                (byte) 0xb0,
                0x16,
                (byte) 0xe0,
                0x20,
                0x20,
                0x20,
                0x10,
                (byte) 0xa2,
                0x00,
                0x01,
                0x00,
                0x07,
                0x44,
                0x01,
                (byte) 0xe0,
                0x2d,
                (byte) 0xac,
                0x09,
                (byte) 0x90
            };

    public HEVCSampleEntryTest() {}

    @Test
    public void checkParse() throws IOException {
        ByteArrayParser parser = new ByteArrayParser();
        List<Box> boxes = parser.parse(STSD_BYTES);
        assertEquals(boxes.size(), 1);
        Box box = boxes.get(0);
        assertTrue(box instanceof SampleDescriptionBox);
        SampleDescriptionBox stsd = (SampleDescriptionBox) box;
        assertTrue(stsd.getFourCC().toString().equals("stsd"));
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        OutputStreamWriter streamWriter = new OutputStreamWriter(baos);
        box.writeTo(streamWriter);
        byte[] bytes = baos.toByteArray();
        assertEquals(bytes, STSD_BYTES);
    }
}
